<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.alanch.am/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.alanch.am/" rel="alternate" type="text/html" /><updated>2020-10-13T04:11:58-07:00</updated><id>https://blog.alanch.am/feed.xml</id><title type="html">Alan Cham</title><subtitle>My blog and sandbox.</subtitle><entry><title type="html">Cool Find: MathJax for Web Math</title><link href="https://blog.alanch.am/2020/10/13/mathjax-for-web-math.html" rel="alternate" type="text/html" title="Cool Find: MathJax for Web Math" /><published>2020-10-13T04:11:00-07:00</published><updated>2020-10-13T04:11:00-07:00</updated><id>https://blog.alanch.am/2020/10/13/mathjax-for-web-math</id><content type="html" xml:base="https://blog.alanch.am/2020/10/13/mathjax-for-web-math.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;Adding LaTeX style math input for your web page is a two-line change.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For a &lt;a href=&quot;/2020/10/10/risk-and-financial-crises.html&quot;&gt;recent post&lt;/a&gt; on Financial Markets, I needed a tool to format math equations. There’s a cool library called &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; that makes it a breeze. Just add these two lines in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://polyfill.io/v3/polyfill.min.js?features=es6&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script id=&quot;MathJax-script&quot; async src=&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first is an optional polyfill to mimic modern features on old browsers. The second plucks the MathJax library off a CDN.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;
&lt;p&gt;You can start writing LaTeX between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$&lt;/code&gt; delimiters.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$ \theta _{t}=\sin^{-1}(\frac{n_{i}\sin\theta _{i}}{n_{t}}) $$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The MathJax display engine handles the rest for you:&lt;/p&gt;

\[\theta _{t}=\sin^{-1}(\frac{n_{i}\sin\theta _{i}}{n_{t}})\]

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;For my post, I didn’t need anything fancy, but I’m still very impressed from a glance at its feature list, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;alternative input notations by MathML and AsciiMath&lt;/li&gt;
  &lt;li&gt;interactive expression explorer for accessibility&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I mean, just right-click on the equation above and see what I’m talking about! 😮&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is, however, a noticeable amount of latency as the math inputs render.&lt;/p&gt;</content><author><name></name></author><category term="mathjax" /><category term="code" /><summary type="html">Adding LaTeX style math input for your web page is a two-line change.</summary></entry><entry><title type="html">Risk and Financial Crises</title><link href="https://blog.alanch.am/2020/10/13/risk-and-financial-crises.html" rel="alternate" type="text/html" title="Risk and Financial Crises" /><published>2020-10-13T04:11:00-07:00</published><updated>2020-10-13T04:11:00-07:00</updated><id>https://blog.alanch.am/2020/10/13/risk-and-financial-crises</id><content type="html" xml:base="https://blog.alanch.am/2020/10/13/risk-and-financial-crises.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;The joke goes as follows.&lt;br /&gt;&lt;br /&gt; Mathematicians think that the normal distribution is ubiquitous in nature because applied workers have discovered that everything is normally distributed.&lt;br /&gt;&lt;br /&gt; But applied workers think that the normal distribution is ubiquitous in nature because mathematicians have proved that it’s ubiquitous in nature.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://www.youtube.com/watch?v=QbosMr2JVrc&amp;amp;list=PL8FB14A2200B87185&quot;&gt;second lecture&lt;/a&gt; of his 2011 Financial Markets course, Yale professor and soon-to-be Nobel Laureate Robert Shiller teaches about the role of probability theory with concrete examples from the Global Financial Crisis (GFC) starting in 2007.&lt;/p&gt;

&lt;p&gt;I watch it now in 2020 amidst a different, pandemic-driven economic crisis, but the lecture was no less topical at its original delivery that Spring semester. Months later, the Occupy Wall Street protests would begin.&lt;/p&gt;

&lt;h1 id=&quot;source&quot;&gt;Source&lt;/h1&gt;
&lt;p&gt;You can view the lecture along with me here:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QbosMr2JVrc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;select-highlights&quot;&gt;Select Highlights&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#financial-crisis-of-2007-2008-and-its-connection-to-probability-theory&quot;&gt;Financial Crisis of 2007-2008 and Its Connection to Probability Theory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#financial-return-and-basic-statistical-concepts&quot;&gt;Financial Return and Basic Statistical Concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#independence-and-failure-of-independence-as-a-cause-for-financial-crises&quot;&gt;Independence and Failure of Independence as a Cause for Financial Crises&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#regression-analysis-systematic-vs-idiosyncratic-risk&quot;&gt;Regression Analysis, Systematic vs. Idiosyncratic Risk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fat-tailed-distributions-and-their-role-during-financial-crises&quot;&gt;Fat-Tailed Distributions and their Role during Financial Crises&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;financial-crisis-of-2007-2008-and-its-connection-to-probability-theory&quot;&gt;Financial Crisis of 2007-2008 and Its Connection to Probability Theory&lt;/h1&gt;
&lt;p&gt;When we think of a crisis, we form narratives to help us understand.&lt;/p&gt;

&lt;p&gt;For example, the 2007 Global Financial Crisis (GFC) began with bubbles in the stock, housing, and commodities markets. Exuberant investors drove prices high. We saw a pre-break in 2000, in the form of a world-wide stock market collapse, but it bounced back by 2003. Then in 2007, we saw widespread institutional collapse. We saw failure of companies investing in home mortgages. We saw bank failure in the U.S, bank runs in the U.K. Nations cooperated to manage the spread of the collapse, bailing out their banks and companies. The world averted unmitigated disaster, and the market began to recover.&lt;/p&gt;

&lt;p&gt;But the financial theorist thinks about the crisis differently, not just in terms of a few big events, but as the accumulation of many smaller events. And though the stories are often helpful, they must look beyond to try and understand the underlying probabilities.&lt;/p&gt;

&lt;h1 id=&quot;financial-return-and-basic-statistical-concepts&quot;&gt;Financial Return and Basic Statistical Concepts&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Return&lt;/strong&gt;
The most basic concept in finance is return, the sum of capital gains and dividends.&lt;/p&gt;

\[Return _t = \frac {Price _{t+1} - Price _t + Dividend _t} {P _t}\]

&lt;p&gt;The return is always within \([-1, ∞)\), because in a limited liability economy, you cannot lose more money than you put in. Therefore, as defined below, gross return is always non-negative.&lt;/p&gt;

\[Gross\,Return = 1 + Return\]

&lt;p&gt;&lt;strong&gt;Mean Return&lt;/strong&gt;
Now, suppose, in order to evaluate an investor’s success, you choose a measure of central tendency. You might take the arithmetic mean of their annual returns:&lt;/p&gt;

\[\bar{x} = \frac {1} {n} \sum_{i=1}^{n} {x _i}\]

&lt;p&gt;Alternatively, you may take the geometric mean, based on gross return (since negative factors could lead to imaginary returns):&lt;/p&gt;

\[G(x) = (\prod_{i=1}^{n} x_i)^{1/n}\]

&lt;p&gt;However, the geometric mean is a better measure of outcome. For example, suppose one year the simple return is 100%. This might weigh down the arithmetic mean, but the geometric mean falls to zero, which is probably a more accurate indicator of overall outcome. I.e. the geometric mean better captures the outsized impact of the calamity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Covariance and Correlation&lt;/strong&gt;
Covariance describes the relatedness of two random variables.&lt;/p&gt;

\[cov(x,y) = \frac{1}{n} \sum_{i=1}^{n} (x-\bar{x})(y-\bar{y})\]

&lt;p&gt;Correlation normalizes that relationship onto a scale from \([-1, 1]\).&lt;/p&gt;

\[\rho = cov(x,y)/(s_x s_y)\]

&lt;h1 id=&quot;independence-and-failure-of-independence-as-a-cause-for-financial-crises&quot;&gt;Independence and Failure of Independence as a Cause for Financial Crises&lt;/h1&gt;
&lt;p&gt;On Black Monday in 1987, global markets markets crashed. DJIA fell 22.6% in one day, and other major foreign markets saw declines as great as 40%. Afterward, companies started to compute a measure of risk: Value at Risk (VaR). E.g. a 5% VaR of $10M means there’s a 5% chance that the value will decline by $10M or more.&lt;/p&gt;

&lt;p&gt;Companies world-wide were computing over-optimistic VaR figures, because of an assumption of independence in their portfolio. By the Law of Large Numbers, you might expect the performance of a portfolio to converge to the expected value as you accumulate more independent assets (e.g. individual mortgages). By bundling a large number of risky assets, you effectively create an intrument that’s more reliable, and therefore more valuable. But that reliability only holds if the assumption of independence also holds. As we saw in the GFC, the correlatedness of the mortgages’ performances snuck a lot of risk into these “safe” instruments.&lt;/p&gt;

&lt;p&gt;In response to the GFC, Professor Brunnermeier of Princeton introduces the idea of a CoVaR, or correlated Value-at-Risk. The risk metric must recognize that, during some episodes, portfolios can co-vary more than expected.&lt;/p&gt;

&lt;h1 id=&quot;regression-analysis-systematic-vs-idiosyncratic-risk&quot;&gt;Regression Analysis, Systematic vs. Idiosyncratic Risk&lt;/h1&gt;

&lt;p&gt;In this example, Shiller takes AAPL and the S&amp;amp;P 500 index, and he scatter plots their monthly returns.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: left; width: 50%;&quot; src=&quot;/assets/img/risk-and-financial-crises/returns.png&quot; /&gt;
&lt;img style=&quot;float: left; width: 50%;&quot; src=&quot;/assets/img/risk-and-financial-crises/regression.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The linear regression line has a slope, called the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta&lt;/code&gt; which measures the stock’s volatility over the market. So we have the formula:&lt;/p&gt;

\[Return_{Total} = Return_{Market} + Return_{Idiosyncratic} = \beta*Return_{S\&amp;amp;P} + Return_{Idiosyncratic}\]

&lt;h1 id=&quot;fat-tailed-distributions-and-their-role-during-financial-crises&quot;&gt;Fat-Tailed Distributions and their Role during Financial Crises&lt;/h1&gt;

&lt;p&gt;There’s a traditional assumption in finances, which turned out to be incorrect in the GFC: random shocks to the financial economy are normally distributed.&lt;/p&gt;

&lt;p&gt;The Central Limit Theorem notes that, for independent identically distributed random variables with finite variance, a distribution of the average of these variables converges to the normal distribution. In other words, like so many things we observe in nature, averages are approximately normally distributed.&lt;/p&gt;

&lt;p&gt;But the normal distribution does not have fat tails, and does not fit with the regular outliers we observe in finance. For example, the probability of Black Monday’s 20.5% drop should have a probability of \( 10^{-71} \) based on observations of daily swings, fitted to a normal distribution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/risk-and-financial-crises/histogram.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Independence leads to the law of large numbers, and a certain expectation of stability. But that expectation is only as good as its assumption of independence, and the financial crisis seems to be related to people’s failure to understand the limits of that assumption.&lt;/p&gt;</content><author><name></name></author><category term="financial-markets" /><category term="robert-shiller" /><summary type="html">The joke goes as follows. Mathematicians think that the normal distribution is ubiquitous in nature because applied workers have discovered that everything is normally distributed. But applied workers think that the normal distribution is ubiquitous in nature because mathematicians have proved that it's ubiquitous in nature.</summary></entry><entry><title type="html">Cube Roots by Newton’s Method in Lisp</title><link href="https://blog.alanch.am/2020/10/05/newtons-cube-root.html" rel="alternate" type="text/html" title="Cube Roots by Newton’s Method in Lisp" /><published>2020-10-05T05:39:00-07:00</published><updated>2020-10-05T05:39:00-07:00</updated><id>https://blog.alanch.am/2020/10/05/newtons-cube-root</id><content type="html" xml:base="https://blog.alanch.am/2020/10/05/newtons-cube-root.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;Using basic elements of programming to compute cube roots.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Chapter §1.1 of SICP covers some basic elements of programming. In this selected exercise 1.8, we use Newton’s Method and some of those elements to calculate cube roots.&lt;/p&gt;

&lt;p&gt;In this solution, I demonstrate concepts such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lexical Scoping&lt;/li&gt;
  &lt;li&gt;Compound Procedures&lt;/li&gt;
  &lt;li&gt;Black Box Abstractions&lt;/li&gt;
  &lt;li&gt;Conditional Expressions and Predicates&lt;/li&gt;
  &lt;li&gt;First-Class Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Newton’s method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value&lt;/p&gt;

\[\frac{(\frac{x}{y^2} + 2y)}{3}\]

  &lt;p&gt;Use this formula to implement a cube-root procedure analagous to the square root procedure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root-iter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;good-enough?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root-iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;improve&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;good-enough?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
               &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
       &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;improve&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root-iter&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this solution I use the block structure (i.e. nested procedure definitions) to internalize sub-procedure implementations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good-enough?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;improve&lt;/code&gt; without cluttering the global environment.&lt;/p&gt;

&lt;p&gt;I can also reference the parent procedure’s formal argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; from within these sub-procedures thanks to lexical scoping, keeping the function signature tighter.&lt;/p&gt;

&lt;p&gt;With a few trial runs, we see that our implementation is both simple and sane.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;-8.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;64.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;-512.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cube-root&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1024.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; -2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; 4.000017449510739&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; -8.000000025890593&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; 10.07936863575223&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can give it a try yourself with this web-based &lt;a href=&quot;https://inst.eecs.berkeley.edu/~cs61a/fa14/assets/interpreter/scheme.html&quot;&gt;scheme interpreter&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;p&gt;The following link is a paid advertisement.&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;OneJS=1&amp;amp;Operation=GetAdHtml&amp;amp;MarketPlace=US&amp;amp;source=ss&amp;amp;ref=as_ss_li_til&amp;amp;ad_type=product_link&amp;amp;tracking_id=acham1-20&amp;amp;language=en_US&amp;amp;marketplace=amazon&amp;amp;region=US&amp;amp;placement=0262510871&amp;amp;asins=0262510871&amp;amp;linkId=a6ace59defa13d2687dc99294fc2ba8b&amp;amp;show_border=true&amp;amp;link_opens_in_new_window=true&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="sicp" /><category term="lisp" /><summary type="html">Using basic elements of programming to compute cube roots.</summary></entry><entry><title type="html">45-Degree Drill Press Jig</title><link href="https://blog.alanch.am/2020/10/05/45-jig.html" rel="alternate" type="text/html" title="45-Degree Drill Press Jig" /><published>2020-10-05T03:02:00-07:00</published><updated>2020-10-05T03:02:00-07:00</updated><id>https://blog.alanch.am/2020/10/05/45-jig</id><content type="html" xml:base="https://blog.alanch.am/2020/10/05/45-jig.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;An incremental improvement in safety and efficiency when drilling angled holes.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As I ramped up production on the hair ties, I began to think about improving my process. The wood cubes are small pieces, difficult to control firmly between fingers in the absence of leverage.&lt;/p&gt;

&lt;p&gt;Once it’s rough-cut from the lumber stock, it’s too small (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.75&quot; x 0.75&quot; x 0.75&quot;&lt;/code&gt; for the mini size) to run through the table or miter saws to make finer size adjustments – by hand, anyway.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Likewise, it’s hard to fix the cube at a 45-degree angle under the drill press, to bore a hole between two adjacent faces. Here were some of my issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Holding the cube by vise would be safest, but:
    &lt;ul&gt;
      &lt;li&gt;too slow and unwieldy to load and unload.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Holding the cube by hand is quicker, but:
    &lt;ul&gt;
      &lt;li&gt;fingers get dangerously close to rotating bit,&lt;/li&gt;
      &lt;li&gt;it’s hard to keep the eyeball-estimated angle consistent between holes,&lt;/li&gt;
      &lt;li&gt;and it’s hard to keep the cube stable against the weight of the bit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-jig&quot;&gt;The Jig&lt;/h1&gt;

&lt;p&gt;I had some leftover redwood stock already beveled to 45-degrees from a previous french cleat project. By chopping off a few inches and gluing a short lip at the base of the slope, we get a simple jig.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/45-jig/45-jig.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The slope and the lip support the cube, resulting in a compromise that makes it slightly safer and easier to drill the holes, without making it awkward to load and unload.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/45-jig/45-jig-press.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h1&gt;

&lt;p&gt;I’ll still need a more serious jig to do more precise holes at scale, but this was all right for now. I was able to produce another small batch of hair ties in oak this weekend, with a less overhead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/45-jig/45-jig-product.jpg&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="woodworking" /><summary type="html">An incremental improvement in safety and efficiency when drilling angled holes.</summary></entry><entry><title type="html">From Chair to Hair (Tie)</title><link href="https://blog.alanch.am/2020/09/20/wood-cube.html" rel="alternate" type="text/html" title="From Chair to Hair (Tie)" /><published>2020-09-20T03:24:30-07:00</published><updated>2020-09-20T03:24:30-07:00</updated><id>https://blog.alanch.am/2020/09/20/wood-cube</id><content type="html" xml:base="https://blog.alanch.am/2020/09/20/wood-cube.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;Carving up a big old chair into smaller goodies.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I had some 70s era chairs from a garage sale purchase, just a couple months ago. But they were in poor condition; for example, the leather had not been conditioned, the dry straps cracking or snapped in places. They hogged space in the shop (garage) too, just gathering sawdust.&lt;/p&gt;

&lt;p&gt;I bought them as they were cheap and made of good mahogany. For most of my past projects I’ve mainly stuck to cheaper, construction grade redwood or pine, so this was a happy find.&lt;/p&gt;

&lt;p&gt;Finally, today I tried an simple mini-project with reusing the wood.&lt;/p&gt;

&lt;h1 id=&quot;before&quot;&gt;Before&lt;/h1&gt;

&lt;p&gt;This poor fellow was selected for today’s harvest.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/chairs.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ouch&quot;&gt;Ouch&lt;/h1&gt;

&lt;p&gt;The leather was labor intensive to remove cleanly due to the old nails. A few times, the nail head broke off, and I’d dig the decapitated nail stalk out of the wood.&lt;/p&gt;

&lt;p&gt;Unwisely, I also left some loose nails on the floor, and I stepped on one. It pierced through the sole of my shoes, jabbing the pad of my foot, but I stopped before it drew blood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/foot.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;leather-scraps&quot;&gt;Leather Scraps&lt;/h1&gt;

&lt;p&gt;Some leather scraps came out of the disassembly too, but those will probably go out in the next trash collection. They’re not in great condition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/leather-scraps.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;salvaged-lumber&quot;&gt;Salvaged Lumber&lt;/h1&gt;

&lt;p&gt;The boards were pretty skinny, but that’s really ok. I want to start focusing on smaller palm-sized projects anyway – things that I can start and finish in one weekend without ado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/chopped-chairs.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cubes&quot;&gt;Cubes&lt;/h1&gt;

&lt;p&gt;One of the cross bars from the chair seat was riddled with snapped nails I couldn’t remove. So I milled out a short three-inch segment of clear wood between the nails.&lt;/p&gt;

&lt;p&gt;After some fiddling with the band saw and sand paper, these two cuties came about, about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&quot; x 1&quot;&lt;/code&gt; in size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/cubes.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hair-ties&quot;&gt;Hair Ties&lt;/h1&gt;

&lt;p&gt;It became a little hair tie with the help of some butcher block conditioner (it was what I had) and an elastic hair tie (donated by my roommate).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chair-tie/hair-tie.jpg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;I’d like to try this again, with some lessons learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use a lighter finish to preserve the wood’s natural color without darkening it so much.&lt;/li&gt;
  &lt;li&gt;Use one cube per hair-tie. Two is unwieldy and makes the elastic band hard to “double-up”.&lt;/li&gt;
  &lt;li&gt;Use a lower profile approach to fasten the hair tie terminals.&lt;/li&gt;
  &lt;li&gt;Use a larger board to start, because running the saw for tiny objects like this can be scary. Fingers get close to blades.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to home furniture, I had fun making these basic cubes; plus I now have a proof of concept for reusing lumber from the chairs.&lt;/p&gt;

&lt;p&gt;I look forward to trying the cubes again soon, and then moving on to other project ideas with the salvaged lumber.&lt;/p&gt;</content><author><name></name></author><category term="woodworking" /><summary type="html">Carving up a big old chair into smaller goodies.</summary></entry><entry><title type="html">Spot the Bug: Golang Hashes</title><link href="https://blog.alanch.am/2020/09/18/spot-the-bug-hashes.html" rel="alternate" type="text/html" title="Spot the Bug: Golang Hashes" /><published>2020-09-18T02:45:14-07:00</published><updated>2020-09-18T02:45:14-07:00</updated><id>https://blog.alanch.am/2020/09/18/spot-the-bug-hashes</id><content type="html" xml:base="https://blog.alanch.am/2020/09/18/spot-the-bug-hashes.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;Suppose we want to compute the md5, sha1, and sha256 sums for some string “Foo Bar”. What’s wrong with this routine?&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;Golang gives us an interface type &lt;a href=&quot;https://golang.org/pkg/hash/&quot;&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash.Hash&lt;/code&gt; &lt;/a&gt; to be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the common interface implemented by all hash functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, the packages 
&lt;a href=&quot;https://golang.org/pkg/crypto/md5/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto/md5&lt;/code&gt;&lt;/a&gt;, 
&lt;a href=&quot;https://golang.org/pkg/crypto/sha256/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto/sha1&lt;/code&gt; &lt;/a&gt;, and 
&lt;a href=&quot;https://golang.org/pkg/crypto/sha256/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto/sha256&lt;/code&gt; &lt;/a&gt; each define an implementation of that interface.&lt;/p&gt;

&lt;p&gt;In the following example, we invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum&lt;/code&gt; method on that interface to hash a string, “Foo Bar”, three ways. But something is wrong.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/md5&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/sha1&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/sha256&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// convert the demo input to a byte slice&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// calculate the hashes&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// print the hex-encoded hashes&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here is the output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;↳ go run main.go
466f6f20426172d41d8cd98f00b204e9800998ecf8427e
466f6f20426172da39a3ee5e6b4b0d3255bfef95601890afd80709
466f6f20426172e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;hint&quot;&gt;Hint&lt;/h1&gt;

&lt;p&gt;Notice the prefix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;466f6f20426172&lt;/code&gt; in each of the hash outputs. You might be surprised to find that the three hashes all coincidentally prepend the same byte sequence. That’s because this is no coincidence at all!&lt;/p&gt;

&lt;p&gt;If we decode the hex, we see that it actually holds the hash input “Foo Bar”! That can’t be right.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;↳ &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;466f6f20426172 | xxd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; | xxd
00000000: 466f 6f20 4261 72                        Foo Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;answer&quot;&gt;Answer&lt;/h1&gt;

&lt;p&gt;Let’s consult the docs for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash.Hash&lt;/code&gt; interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Write (via the embedded io.Writer interface) adds more data to the running hash.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// It never returns an error.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Sum appends the current hash to b and returns the resulting slice.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// It does not change the underlying hash state.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Reset resets the Hash to its initial state.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Size returns the number of bytes Sum will return.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// BlockSize returns the hash's underlying block size.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// The Write method must be able to accept any amount&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// of data, but it may operate more efficiently if all writes&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// are a multiple of the block size.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BlockSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We learn that the receiver method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum&lt;/code&gt; does not do what one might intuit (or, at least &lt;em&gt;I&lt;/em&gt; was surprised). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum&lt;/code&gt; method just concatenates its argument with a running hash of its internal buffer contents.&lt;/p&gt;

&lt;p&gt;So, the prefix is the hex-encoded “Foo Bar” input. The tail comes from the initial state of the running hash, i.e. the hash of an empty byte sequence.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Prefix&lt;/th&gt;
      &lt;th&gt;Blank Hash&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;md5&lt;/td&gt;
      &lt;td&gt;466f6f20426172&lt;/td&gt;
      &lt;td&gt;d41d8cd98f00b204e9800998ecf8427e&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sha1&lt;/td&gt;
      &lt;td&gt;466f6f20426172&lt;/td&gt;
      &lt;td&gt;da39a3ee5e6b4b0d3255bfef95601890afd80709&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sha256&lt;/td&gt;
      &lt;td&gt;466f6f20426172&lt;/td&gt;
      &lt;td&gt;e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;How do we fix the example?&lt;/p&gt;

&lt;h1 id=&quot;correct-usage&quot;&gt;Correct Usage&lt;/h1&gt;

&lt;p&gt;We can use the embedded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.Writer&lt;/code&gt; methods to push the input string onto the hash’s internal buffer, and set the prefix to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;. Alternatively, just use one of the various convenience methods provided in the packages.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/md5&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/sha1&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/sha256&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// convert the demo input to a byte slice&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo Bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// calculate the hashes&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// alternate: calculate the hashes&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;alta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;altb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;altc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sum256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// print the hex-encoded hashes&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you’re a meticulous, hawk-eyed reader of the docs, then you’ll likely have found this exercise pretty silly. But I sometimes tend to skim the details, especially when the function names look &lt;em&gt;so&lt;/em&gt; very self-explanatory and simple. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum([]byte) []byte&lt;/code&gt; on a hash interface.&lt;/p&gt;

&lt;p&gt;In dev work as in life, humbling mistakes like these can be a helpful reminder for me to be careful and check my assumptions more thoroughly, especially when working with something new.&lt;/p&gt;</content><author><name></name></author><category term="golang" /><category term="code" /><category term="md5" /><category term="sha1" /><category term="sha256" /><category term="hash" /><summary type="html">Suppose we want to compute the md5, sha1, and sha256 sums for some string &quot;Foo Bar&quot;. What's wrong with this routine?</summary></entry><entry><title type="html">Being Careful With UUID Comparisons</title><link href="https://blog.alanch.am/2020/08/16/being-careful-with-uuid-comparisons.html" rel="alternate" type="text/html" title="Being Careful With UUID Comparisons" /><published>2020-08-16T09:57:14-07:00</published><updated>2020-08-16T09:57:14-07:00</updated><id>https://blog.alanch.am/2020/08/16/being-careful-with-uuid-comparisons</id><content type="html" xml:base="https://blog.alanch.am/2020/08/16/being-careful-with-uuid-comparisons.html">&lt;p&gt;&lt;span class=&quot;tagline&quot;&gt;They’re powerful and easy to use, but be careful when comparing their string representations.&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;UUIDs are useful – the id space is large enough that, if ids are generated by some standard algorithm, they are effectively &lt;em&gt;globally&lt;/em&gt; unique. In AdTech, for example, mobile device identifiers are commonly implemented as UUID. They can then be guaranteed unique across all devices but still be reset locally without updating some remote, central registry.&lt;/p&gt;

&lt;p&gt;When marshaled to the canonical &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8-4-4-4-12&lt;/code&gt; pattern of hyphen-delimited hexadecimal characters, these 128-bit values are really quite clean to read (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EA7583CD-A667-48BC-B806-42ECB2B48606&lt;/code&gt;). And, in my experience, these tidy, human-readable strings are the most popular mode of UUID exchange.&lt;/p&gt;

&lt;h1 id=&quot;a-nuance&quot;&gt;A Nuance&lt;/h1&gt;

&lt;p&gt;Despite that easy legibility, there’s also a simple pitfall to beware:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hexadecimal encodings regularly comprise upper &lt;em&gt;or&lt;/em&gt; lower casings for alphabetical characters A-F.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider these mobile device identifiers for Android (AAID) and iOS (IDFA):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IDFA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EA7583CD-A667-48BC-B806-42ECB2B48606&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;AAID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cdda802e-fb9c-47ad-9866-0794d394c912&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both are valid examples of canonical UUID strings.&lt;/p&gt;

&lt;h1 id=&quot;the-pitfall&quot;&gt;The Pitfall&lt;/h1&gt;

&lt;p&gt;Suppose a naive implementation of a UUID comparator in Golang.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;errors&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Equals checks the input uuids for equivalence.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%v is not a valid uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%v is not a valid uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If, say, you were implementing an opt-out filter to remove device ids from your targeted advertising campaign, then you might get some false negatives by surprise! For example, a candidate UUID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EA7583CD-A667-48BC-B806-42ECB2B48606&lt;/code&gt; would not match the UUID in your filter blacklist &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ea7583cd-a667-48bc-b806-42ecb2b48606&lt;/code&gt;, although they represent the same 128-bit UUID.&lt;/p&gt;

&lt;h1 id=&quot;some-alternatives&quot;&gt;Some Alternatives&lt;/h1&gt;

&lt;p&gt;To avoid the accident above, one approach you might try would be to normalize the strings to all use consistent casing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;errors&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;strings&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Equals checks the input uuids for equivalence.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%v is not a valid uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%v is not a valid uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, better yet, just parse the string representation and compare the unencoded bytes for even better integrity. With a nice library, it’s both easy and clean:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/satori/go.uuid&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Equals checks the input uuids for equivalence.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In practice, if the UUIDs you process are sourced from the same origin, they’ll mostly likely be consistent in representation (exclusively using upper case or exclusively using lower case). So even if you goof and introduce a potential bug through a naive UUID comparison, you would probably get away unscathed.&lt;/p&gt;

&lt;p&gt;But if the UUIDs you process are sourced from multiple origins, then handling the UUIDs more robustly just might save your butt. After all, one cannot take for granted that a representation being valid and canonical means there are no practical variations to be checked and controlled against.&lt;/p&gt;</content><author><name></name></author><category term="uuid" /><category term="idfa" /><category term="aaid" /><category term="golang" /><category term="code" /><summary type="html">They're powerful and easy to use, but be careful when comparing their string representations.</summary></entry><entry><title type="html">Welcome!</title><link href="https://blog.alanch.am/2020/08/05/welcome.html" rel="alternate" type="text/html" title="Welcome!" /><published>2020-08-05T01:58:14-07:00</published><updated>2020-08-05T01:58:14-07:00</updated><id>https://blog.alanch.am/2020/08/05/welcome</id><content type="html" xml:base="https://blog.alanch.am/2020/08/05/welcome.html">&lt;p&gt;Hello world! Let’s have some fun – Liquid templating looks pretty neat : )&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="ruby" /><category term="other" /><category term="liquid" /><summary type="html">Hello world! Let’s have some fun – Liquid templating looks pretty neat : )</summary></entry></feed>